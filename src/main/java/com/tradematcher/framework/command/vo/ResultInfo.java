package com.tradematcher.framework.command.vo;

import java.util.Arrays;
import java.util.Optional;

/**
 * 撮合返回信息常量
 * @program: new-match-engine
 * @author: TradeMatcher
 * @create: 2023-04-19 19:29
 **/
public enum ResultInfo {
	// @formatter:off
	SUCCESS(100,"SUCCESS"),
	STARTUP_ERROR(1001,"STARTUP_ERROR"),
	FORMAT_EXCEPTION(1002,"FORMAT_EXCEPTION"),
	ACCESS_KEY_ERROR(1003,"ACCESS_KEY_ERROR"),
	UNKNOWN_EXCEPTION(1004,"UNKNOWN_EXCEPTION"),
	NO_COMMAND(1005,"NO_COMMAND"),
	ACCESS_KEY_NO_CONNECTION(1006,"ACCESS_KEY_NO_CONNECTION"),
	AUTH_ERROR(1007,"AUTH_ERROR"),
	COMMAND_PARAMETERS_FORMAT_ERROR(1008,"COMMAND_PARAMETERS_FORMAT_ERROR"),
	INVALID_REQUEST(1009,"INVALID_REQUEST"),
	DUPLICATE_SYMBOL(1010,"DUPLICATE_SYMBOL"),
	TYPE_ERROR(1011,"TYPE_ERROR"),

	NEW(0,"NEW"), VALID_FOR_MATCHING_ENGINE(1,"VALID_FOR_MATCHING_ENGINE"),

	ACCEPTED(110,"ACCEPTED"),


	AUTH_INVALID_USER(-1001,"AUTH_INVALID_USER"),
	AUTH_TOKEN_EXPIRED(-1002,"AUTH_TOKEN_EXPIRED"),

	INVALID_SYMBOL(-1201,"INVALID_SYMBOL"),
	INVALID_PRICE_STEP(-1202,"INVALID_PRICE_STEP"),
	UNSUPPORTED_SYMBOL_TYPE(-1203,"UNSUPPORTED_SYMBOL_TYPE"),

	RISK_NSF(-2001,"RISK_NSF"),
	RISK_INVALID_RESERVE_BID_PRICE(-2002,"RISK_INVALID_RESERVE_BID_PRICE"),
	RISK_ASK_PRICE_LOWER_THAN_FEE(-2003,"RISK_ASK_PRICE_LOWER_THAN_FEE"),
	RISK_MARGIN_TRADING_DISABLED(-2004,"RISK_MARGIN_TRADING_DISABLED"),
	INVALID_SIZE(-2005,"INVALID_SIZE"),

	MATCHING_COUNTERPARTY_NOT_FOUND(-3001,"MATCHING_COUNTERPARTY_NOT_FOUND"),
	MATCHING_UNKNOWN_ORDER_ID(-3002,"MATCHING_UNKNOWN_ORDER_ID"),
	MATCHING_DUPLICATE_ORDER_ID(-3003,"MATCHING_DUPLICATE_ORDER_ID"),
	MATCHING_UNSUPPORTED_COMMAND(-3004,"MATCHING_UNSUPPORTED_COMMAND"),
	MATCHING_INVALID_ORDER_BOOK_ID(-3005,"MATCHING_INVALID_ORDER_BOOK_ID"),
	MATCHING_MOVE_FAILED_PRICE_OVER_RISK_LIMIT(-3041,"MATCHING_MOVE_FAILED_PRICE_OVER_RISK_LIMIT"),
	MATCHING_REDUCE_FAILED_WRONG_SIZE(-3051,"MATCHING_REDUCE_FAILED_WRONG_SIZE"),
	USER_MGMT_USER_ALREADY_EXISTS(-4001,"USER_MGMT_USER_ALREADY_EXISTS"),

	USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_ALREADY_APPLIED_SAME(-4101,"USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_ALREADY_APPLIED_SAME"),
	USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_ALREADY_APPLIED_MANY(-4102,"USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_ALREADY_APPLIED_MANY"),
	USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_NSF(-4103,"USER_MGMT_ACCOUNT_BALANCE_ADJUSTMENT_NSF"),
	USER_MGMT_NON_ZERO_ACCOUNT_BALANCE(-4104,"USER_MGMT_NON_ZERO_ACCOUNT_BALANCE"),

	USER_MGMT_USER_NOT_SUSPENDABLE_HAS_POSITIONS(-4130,"USER_MGMT_USER_NOT_SUSPENDABLE_HAS_POSITIONS"),
	USER_MGMT_USER_NOT_SUSPENDABLE_NON_EMPTY_ACCOUNTS(-4131,"USER_MGMT_USER_NOT_SUSPENDABLE_NON_EMPTY_ACCOUNTS"),
	USER_MGMT_USER_NOT_SUSPENDED(-4132,"USER_MGMT_USER_NOT_SUSPENDED"),
	USER_MGMT_USER_ALREADY_SUSPENDED(-4133,"USER_MGMT_USER_ALREADY_SUSPENDED"),

	USER_MGMT_USER_NOT_FOUND(-4201,"USER_MGMT_USER_NOT_FOUND"),

	SYMBOL_MGMT_SYMBOL_ALREADY_EXISTS(-5001,"SYMBOL_MGMT_SYMBOL_ALREADY_EXISTS"),

	BINARY_COMMAND_FAILED(-8001,"BINARY_COMMAND_FAILED"),
	REPORT_QUERY_UNKNOWN_TYPE(-8003,"REPORT_QUERY_UNKNOWN_TYPE"),
	STATE_PERSIST_RISK_ENGINE_FAILED(-8010,"STATE_PERSIST_RISK_ENGINE_FAILED"),
	STATE_PERSIST_MATCHING_ENGINE_FAILED(-8020,"STATE_PERSIST_MATCHING_ENGINE_FAILED"),
	;
	// @formatter:on
	private final int code;
	private final String msg;

	ResultInfo(int code, String msg) {
		this.code = code;
		this.msg = msg;
	}

	public static ResultInfo getResultInfo(int code) {
		Optional<ResultInfo> any = Arrays.stream(ResultInfo.values()).filter(eventInfo -> eventInfo.getCode() == code)
				.findAny();
		return any.orElse(UNKNOWN_EXCEPTION);
	}

	public int getCode() {
		return code;
	}

	public String getMsg() {
		return msg;
	}
}
